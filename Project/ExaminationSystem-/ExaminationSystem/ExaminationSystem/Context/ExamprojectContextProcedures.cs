// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ExaminationSystem.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ExaminationSystem.Context
{
    public partial class ExamprojectContext
    {
        private ExamprojectContextProcedures _procedures;

        public virtual ExamprojectContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ExamprojectContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ExamprojectContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<answer_questionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<correctExamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_crsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_crs_questionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_deptResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_examResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_exam_choicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_instructorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_Q_ex_studResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_QuestionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_stud_courseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_studentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<delete_topicResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<displayAllStudentInfo_DeptidResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Exam_AnswersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<examAnswersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<generateExamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_all_choicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_all_coursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_all_departmentsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_all_examsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_all_instructorsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_all_questionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_all_studentsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_all_topicsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_courseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_course_questionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_course_topicsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_deptResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_examResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_instResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_instructor_coursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_q_stud_answerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_questionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_question_choicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_std_coursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_studResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_topicsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getcourseIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getCrsGradeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<gradesStudentAllCoursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_courseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_deptResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_examResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_exam_choicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_instResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_inst_coursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_questionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_studResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_stud_coursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_student_answerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insert_topicsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<nameCourses_noStudentsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<questionChoicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<QuestionsandCoicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<QuestionsChoicesinExamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<topicsINCourseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_courseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_course_questionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_course_questions2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_course_topicsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_deptResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_examResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_instResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_instructor_coursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_q_stud_answerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_question_choicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_std_coursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_studResult>().HasNoKey().ToView(null);
        }
    }

    public interface IExamprojectContextProceduresContract
    {
        Task<int> answer_questionAsync(int? id, int? Q_id, string std_answer, int? crs_id, CancellationToken cancellationToken = default);
        Task<int> correctExamAsync(int? ex_id, int? std_id, int? crs_id, CancellationToken cancellationToken = default);
        Task<int> delete_crsAsync(int? id, CancellationToken cancellationToken = default);
        Task<int> delete_crs_questionsAsync(int? crs_id, CancellationToken cancellationToken = default);
        Task<int> delete_deptAsync(int? id, CancellationToken cancellationToken = default);
        Task<int> delete_examAsync(int? id, CancellationToken cancellationToken = default);
        Task<int> delete_exam_choicesAsync(int? id, CancellationToken cancellationToken = default);
        Task<int> delete_instructorAsync(int? id, CancellationToken cancellationToken = default);
        Task<int> delete_Q_ex_studAsync(int? Q_id, int? ex_id, int? stud_id, CancellationToken cancellationToken = default);
        Task<int> delete_QuestionAsync(int? Q_id, int? ex_id, CancellationToken cancellationToken = default);
        Task<int> delete_stud_courseAsync(int? st_id, int? crs_id, CancellationToken cancellationToken = default);
        Task<int> delete_studentAsync(int? id, CancellationToken cancellationToken = default);
        Task<int> delete_topicAsync(int? topic_id, CancellationToken cancellationToken = default);
        Task<List<displayAllStudentInfo_DeptidResult>> displayAllStudentInfo_DeptidAsync(int? id, CancellationToken cancellationToken = default);
        Task<int> Exam_AnswersAsync(int? Ex_num, int? stu_ID, int? Q1, int? Q2, int? Q3, int? Q4, int? Q5, int? Q6, int? Q7, int? Q8, int? Q9, int? Q10, string AQ1, string AQ2, string AQ3, string AQ4, string AQ5, string AQ6, string AQ7, string AQ8, string AQ9, string AQ10, CancellationToken cancellationToken = default);
        Task<List<examAnswersResult>> examAnswersAsync(int? ex_id, int? st_id, CancellationToken cancellationToken = default);
        Task<int> generateExamAsync(int? crs_id, int? no_T_F, int? no_mcq, CancellationToken cancellationToken = default);
        Task<List<get_all_choicesResult>> get_all_choicesAsync(CancellationToken cancellationToken = default);
        Task<List<get_all_coursesResult>> get_all_coursesAsync(CancellationToken cancellationToken = default);
        Task<List<get_all_departmentsResult>> get_all_departmentsAsync(CancellationToken cancellationToken = default);
        Task<List<get_all_examsResult>> get_all_examsAsync(CancellationToken cancellationToken = default);
        Task<List<get_all_instructorsResult>> get_all_instructorsAsync(CancellationToken cancellationToken = default);
        Task<List<get_all_questionsResult>> get_all_questionsAsync(CancellationToken cancellationToken = default);
        Task<List<get_all_studentsResult>> get_all_studentsAsync(CancellationToken cancellationToken = default);
        Task<List<get_all_topicsResult>> get_all_topicsAsync(CancellationToken cancellationToken = default);
        Task<List<get_courseResult>> get_courseAsync(int? id, CancellationToken cancellationToken = default);
        Task<List<get_course_questionsResult>> get_course_questionsAsync(int? c_id, CancellationToken cancellationToken = default);
        Task<List<get_course_topicsResult>> get_course_topicsAsync(string c_name, CancellationToken cancellationToken = default);
        Task<List<get_deptResult>> get_deptAsync(int? id, CancellationToken cancellationToken = default);
        Task<List<get_examResult>> get_examAsync(int? id, CancellationToken cancellationToken = default);
        Task<List<get_instResult>> get_instAsync(int? id, CancellationToken cancellationToken = default);
        Task<List<get_instructor_coursesResult>> get_instructor_coursesAsync(int? id, CancellationToken cancellationToken = default);
        Task<List<get_q_stud_answerResult>> get_q_stud_answerAsync(int? st_id, CancellationToken cancellationToken = default);
        Task<List<get_questionResult>> get_questionAsync(int? id, CancellationToken cancellationToken = default);
        Task<List<get_question_choicesResult>> get_question_choicesAsync(int? id, CancellationToken cancellationToken = default);
        Task<List<get_std_coursesResult>> get_std_coursesAsync(int? st_id, CancellationToken cancellationToken = default);
        Task<List<get_studResult>> get_studAsync(int? id, CancellationToken cancellationToken = default);
        Task<List<get_topicsResult>> get_topicsAsync(int? t_id, CancellationToken cancellationToken = default);
        Task<List<getcourseIDResult>> getcourseIDAsync(string crsName, CancellationToken cancellationToken = default);
        Task<List<getCrsGradeResult>> getCrsGradeAsync(int? SID, int? CID, CancellationToken cancellationToken = default);
        Task<List<gradesStudentAllCoursesResult>> gradesStudentAllCoursesAsync(int? st_id, CancellationToken cancellationToken = default);
        Task<int> insert_courseAsync(int? id, string crs_name, CancellationToken cancellationToken = default);
        Task<int> insert_deptAsync(int? id, string name, CancellationToken cancellationToken = default);
        Task<int> insert_examAsync(int? id, TimeSpan? duration, int? course_id, CancellationToken cancellationToken = default);
        Task<int> insert_exam_choicesAsync(int? id, string choices, CancellationToken cancellationToken = default);
        Task<int> insert_instAsync(int? id, string name, int? dept_id, CancellationToken cancellationToken = default);
        Task<int> insert_inst_coursesAsync(int? c_id, int? inst_id, CancellationToken cancellationToken = default);
        Task<int> insert_questionAsync(int? id, string q_desc, string q_type, string model_answer, int? grade, int? c_id, CancellationToken cancellationToken = default);
        Task<int> insert_studAsync(int? id, string f_name, string l_name, int? dept_id, CancellationToken cancellationToken = default);
        Task<int> insert_stud_coursesAsync(int? c_id, int? std_id, int? crs_grade, CancellationToken cancellationToken = default);
        Task<int> insert_student_answerAsync(int? q_id, int? ex_id, int? stud_id, string std_answer, CancellationToken cancellationToken = default);
        Task<int> insert_topicsAsync(int? id, string topic_name, int? crs_id, CancellationToken cancellationToken = default);
        Task<List<nameCourses_noStudentsResult>> nameCourses_noStudentsAsync(int? ins_id, CancellationToken cancellationToken = default);
        Task<List<questionChoicesResult>> questionChoicesAsync(int? QID, int? EID, CancellationToken cancellationToken = default);
        Task<List<QuestionsandCoicesResult>> QuestionsandCoicesAsync(int? ex_id, CancellationToken cancellationToken = default);
        Task<List<QuestionsChoicesinExamResult>> QuestionsChoicesinExamAsync(int? ex_id, CancellationToken cancellationToken = default);
        Task<List<topicsINCourseResult>> topicsINCourseAsync(int? crs_id, CancellationToken cancellationToken = default);
        Task<int> update_courseAsync(int? id, string name, CancellationToken cancellationToken = default);
        Task<int> update_course_questionsAsync(int? id, int? Q_id, string Question, string Q_type, string Q_model_answer, int? grade, CancellationToken cancellationToken = default);
        Task<int> update_course_questions2Async(int? id, string Question, string Q_type, string Q_model_answer, int? grade, int? course_id, CancellationToken cancellationToken = default);
        Task<int> update_course_topicsAsync(int? id, string topic_name, int? topic_id, CancellationToken cancellationToken = default);
        Task<int> update_deptAsync(int? id, string name, CancellationToken cancellationToken = default);
        Task<int> update_examAsync(int? id, TimeSpan? duration, int? course_id, CancellationToken cancellationToken = default);
        Task<int> update_instAsync(int? id, string name, int? dept_id, CancellationToken cancellationToken = default);
        Task<int> update_instructor_coursesAsync(int? id, int? course_id, CancellationToken cancellationToken = default);
        Task<int> update_q_stud_answerAsync(int? id, int? Q_id, int? ex_id, string std_answer, CancellationToken cancellationToken = default);
        Task<int> update_question_choicesAsync(int? id, string choices, CancellationToken cancellationToken = default);
        Task<int> update_std_coursesAsync(int? id, int? course_id, int? course_grade, CancellationToken cancellationToken = default);
        Task<int> update_studAsync(int? id, string first_name, string last_name, int? dept_id, CancellationToken cancellationToken = default);
    }

    public partial class ExamprojectContextProcedures
    {
        private readonly ExamprojectContext _context;

        public ExamprojectContextProcedures(ExamprojectContext context)
        {
            _context = context;
        }

        public virtual async Task<int> answer_questionAsync(int? id, int? Q_id, string std_answer, int? crs_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q_id",
                    Value = Q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "std_answer",
                    Size = 40,
                    Value = std_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "crs_id",
                    Value = crs_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[answer_question] @id, @Q_id, @std_answer, @crs_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> correctExamAsync(int? ex_id, int? std_id, int? crs_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "crs_id",
                    Value = crs_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[correctExam] @ex_id, @std_id, @crs_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_crsAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_crs] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_crs_questionsAsync(int? crs_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_id",
                    Value = crs_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_crs_questions] @crs_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_deptAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_dept] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_examAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_exam] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_exam_choicesAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_exam_choices] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_instructorAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_instructor] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_Q_ex_studAsync(int? Q_id, int? ex_id, int? stud_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Q_id",
                    Value = Q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stud_id",
                    Value = stud_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_Q_ex_stud] @Q_id, @ex_id, @stud_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_QuestionAsync(int? Q_id, int? ex_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Q_id",
                    Value = Q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_Question] @Q_id, @ex_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_stud_courseAsync(int? st_id, int? crs_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "st_id",
                    Value = st_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "crs_id",
                    Value = crs_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_stud_course] @st_id, @crs_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_studentAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_student] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> delete_topicAsync(int? topic_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "topic_id",
                    Value = topic_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[delete_topic] @topic_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<displayAllStudentInfo_DeptidResult>> displayAllStudentInfo_DeptidAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<displayAllStudentInfo_DeptidResult>("EXEC @returnValue = [dbo].[displayAllStudentInfo_Deptid] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Exam_AnswersAsync(int? Ex_num, int? stu_ID, int? Q1, int? Q2, int? Q3, int? Q4, int? Q5, int? Q6, int? Q7, int? Q8, int? Q9, int? Q10, string AQ1, string AQ2, string AQ3, string AQ4, string AQ5, string AQ6, string AQ7, string AQ8, string AQ9, string AQ10, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ex_num",
                    Value = Ex_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stu_ID",
                    Value = stu_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q1",
                    Value = Q1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q2",
                    Value = Q2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q3",
                    Value = Q3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q4",
                    Value = Q4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q5",
                    Value = Q5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q6",
                    Value = Q6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q7",
                    Value = Q7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q8",
                    Value = Q8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q9",
                    Value = Q9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q10",
                    Value = Q10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AQ1",
                    Size = 50,
                    Value = AQ1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AQ2",
                    Size = 50,
                    Value = AQ2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AQ3",
                    Size = 50,
                    Value = AQ3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AQ4",
                    Size = 50,
                    Value = AQ4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AQ5",
                    Size = 50,
                    Value = AQ5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AQ6",
                    Size = 50,
                    Value = AQ6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AQ7",
                    Size = 50,
                    Value = AQ7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AQ8",
                    Size = 50,
                    Value = AQ8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AQ9",
                    Size = 50,
                    Value = AQ9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AQ10",
                    Size = 50,
                    Value = AQ10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Exam_Answers] @Ex_num, @stu_ID, @Q1, @Q2, @Q3, @Q4, @Q5, @Q6, @Q7, @Q8, @Q9, @Q10, @AQ1, @AQ2, @AQ3, @AQ4, @AQ5, @AQ6, @AQ7, @AQ8, @AQ9, @AQ10", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<examAnswersResult>> examAnswersAsync(int? ex_id, int? st_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "st_id",
                    Value = st_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<examAnswersResult>("EXEC @returnValue = [dbo].[examAnswers] @ex_id, @st_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> generateExamAsync(int? crs_id, int? no_T_F, int? no_mcq, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_id",
                    Value = crs_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "no_T_F",
                    Value = no_T_F ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "no_mcq",
                    Value = no_mcq ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[generateExam] @crs_id, @no_T_F, @no_mcq", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_all_choicesResult>> get_all_choicesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_all_choicesResult>("EXEC @returnValue = [dbo].[get_all_choices]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_all_coursesResult>> get_all_coursesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_all_coursesResult>("EXEC @returnValue = [dbo].[get_all_courses]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_all_departmentsResult>> get_all_departmentsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_all_departmentsResult>("EXEC @returnValue = [dbo].[get_all_departments]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_all_examsResult>> get_all_examsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_all_examsResult>("EXEC @returnValue = [dbo].[get_all_exams]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_all_instructorsResult>> get_all_instructorsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_all_instructorsResult>("EXEC @returnValue = [dbo].[get_all_instructors]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_all_questionsResult>> get_all_questionsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_all_questionsResult>("EXEC @returnValue = [dbo].[get_all_questions]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_all_studentsResult>> get_all_studentsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_all_studentsResult>("EXEC @returnValue = [dbo].[get_all_students]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_all_topicsResult>> get_all_topicsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_all_topicsResult>("EXEC @returnValue = [dbo].[get_all_topics]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_courseResult>> get_courseAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_courseResult>("EXEC @returnValue = [dbo].[get_course] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_course_questionsResult>> get_course_questionsAsync(int? c_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "c_id",
                    Value = c_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_course_questionsResult>("EXEC @returnValue = [dbo].[get_course_questions] @c_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_course_topicsResult>> get_course_topicsAsync(string c_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "c_name",
                    Size = 40,
                    Value = c_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_course_topicsResult>("EXEC @returnValue = [dbo].[get_course_topics] @c_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_deptResult>> get_deptAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_deptResult>("EXEC @returnValue = [dbo].[get_dept] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_examResult>> get_examAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_examResult>("EXEC @returnValue = [dbo].[get_exam] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_instResult>> get_instAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_instResult>("EXEC @returnValue = [dbo].[get_inst] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_instructor_coursesResult>> get_instructor_coursesAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_instructor_coursesResult>("EXEC @returnValue = [dbo].[get_instructor_courses] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_q_stud_answerResult>> get_q_stud_answerAsync(int? st_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "st_id",
                    Value = st_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_q_stud_answerResult>("EXEC @returnValue = [dbo].[get_q_stud_answer] @st_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_questionResult>> get_questionAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_questionResult>("EXEC @returnValue = [dbo].[get_question] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_question_choicesResult>> get_question_choicesAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_question_choicesResult>("EXEC @returnValue = [dbo].[get_question_choices] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_std_coursesResult>> get_std_coursesAsync(int? st_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "st_id",
                    Value = st_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_std_coursesResult>("EXEC @returnValue = [dbo].[get_std_courses] @st_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_studResult>> get_studAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_studResult>("EXEC @returnValue = [dbo].[get_stud] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_topicsResult>> get_topicsAsync(int? t_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "t_id",
                    Value = t_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_topicsResult>("EXEC @returnValue = [dbo].[get_topics] @t_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getcourseIDResult>> getcourseIDAsync(string crsName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crsName",
                    Size = 50,
                    Value = crsName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getcourseIDResult>("EXEC @returnValue = [dbo].[getcourseID] @crsName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getCrsGradeResult>> getCrsGradeAsync(int? SID, int? CID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SID",
                    Value = SID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CID",
                    Value = CID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getCrsGradeResult>("EXEC @returnValue = [dbo].[getCrsGrade] @SID, @CID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<gradesStudentAllCoursesResult>> gradesStudentAllCoursesAsync(int? st_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "st_id",
                    Value = st_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<gradesStudentAllCoursesResult>("EXEC @returnValue = [dbo].[gradesStudentAllCourses] @st_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_courseAsync(int? id, string crs_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 40,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_course] @id, @crs_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_deptAsync(int? id, string name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 100,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_dept] @id, @name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_examAsync(int? id, TimeSpan? duration, int? course_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "duration",
                    Scale = 7,
                    Value = duration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Time,
                },
                new SqlParameter
                {
                    ParameterName = "course_id",
                    Value = course_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_exam] @id, @duration, @course_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_exam_choicesAsync(int? id, string choices, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "choices",
                    Size = 200,
                    Value = choices ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_exam_choices] @id, @choices", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_instAsync(int? id, string name, int? dept_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 100,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_inst] @id, @name, @dept_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_inst_coursesAsync(int? c_id, int? inst_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "c_id",
                    Value = c_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inst_id",
                    Value = inst_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_inst_courses] @c_id, @inst_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_questionAsync(int? id, string q_desc, string q_type, string model_answer, int? grade, int? c_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "q_desc",
                    Size = -1,
                    Value = q_desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "q_type",
                    Size = 40,
                    Value = q_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "model_answer",
                    Size = -1,
                    Value = model_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "grade",
                    Value = grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "c_id",
                    Value = c_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_question] @id, @q_desc, @q_type, @model_answer, @grade, @c_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_studAsync(int? id, string f_name, string l_name, int? dept_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "f_name",
                    Size = 40,
                    Value = f_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "l_name",
                    Size = 40,
                    Value = l_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_stud] @id, @f_name, @l_name, @dept_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_stud_coursesAsync(int? c_id, int? std_id, int? crs_grade, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "c_id",
                    Value = c_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "crs_grade",
                    Value = crs_grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_stud_courses] @c_id, @std_id, @crs_grade", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_student_answerAsync(int? q_id, int? ex_id, int? stud_id, string std_answer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "q_id",
                    Value = q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stud_id",
                    Value = stud_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "std_answer",
                    Size = 40,
                    Value = std_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_student_answer] @q_id, @ex_id, @stud_id, @std_answer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_topicsAsync(int? id, string topic_name, int? crs_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "topic_name",
                    Size = 100,
                    Value = topic_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "crs_id",
                    Value = crs_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_topics] @id, @topic_name, @crs_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<nameCourses_noStudentsResult>> nameCourses_noStudentsAsync(int? ins_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ins_id",
                    Value = ins_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<nameCourses_noStudentsResult>("EXEC @returnValue = [dbo].[nameCourses_noStudents] @ins_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<questionChoicesResult>> questionChoicesAsync(int? QID, int? EID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QID",
                    Value = QID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EID",
                    Value = EID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<questionChoicesResult>("EXEC @returnValue = [dbo].[questionChoices] @QID, @EID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<QuestionsandCoicesResult>> QuestionsandCoicesAsync(int? ex_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<QuestionsandCoicesResult>("EXEC @returnValue = [dbo].[QuestionsandCoices] @ex_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<QuestionsChoicesinExamResult>> QuestionsChoicesinExamAsync(int? ex_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<QuestionsChoicesinExamResult>("EXEC @returnValue = [dbo].[QuestionsChoicesinExam] @ex_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<topicsINCourseResult>> topicsINCourseAsync(int? crs_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_id",
                    Value = crs_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<topicsINCourseResult>("EXEC @returnValue = [dbo].[topicsINCourse] @crs_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_courseAsync(int? id, string name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 40,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_course] @id, @name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_course_questionsAsync(int? id, int? Q_id, string Question, string Q_type, string Q_model_answer, int? grade, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q_id",
                    Value = Q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Question",
                    Size = -1,
                    Value = Question ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Q_type",
                    Size = 40,
                    Value = Q_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "Q_model_answer",
                    Size = -1,
                    Value = Q_model_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "grade",
                    Value = grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_course_questions] @id, @Q_id, @Question, @Q_type, @Q_model_answer, @grade", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_course_questions2Async(int? id, string Question, string Q_type, string Q_model_answer, int? grade, int? course_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Question",
                    Size = -1,
                    Value = Question ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Q_type",
                    Size = 40,
                    Value = Q_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "Q_model_answer",
                    Size = -1,
                    Value = Q_model_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "grade",
                    Value = grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "course_id",
                    Value = course_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_course_questions2] @id, @Question, @Q_type, @Q_model_answer, @grade, @course_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_course_topicsAsync(int? id, string topic_name, int? topic_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "topic_name",
                    Size = 100,
                    Value = topic_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "topic_id",
                    Value = topic_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_course_topics] @id, @topic_name, @topic_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_deptAsync(int? id, string name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 100,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_dept] @id, @name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_examAsync(int? id, TimeSpan? duration, int? course_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "duration",
                    Scale = 7,
                    Value = duration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Time,
                },
                new SqlParameter
                {
                    ParameterName = "course_id",
                    Value = course_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_exam] @id, @duration, @course_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_instAsync(int? id, string name, int? dept_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 100,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_inst] @id, @name, @dept_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_instructor_coursesAsync(int? id, int? course_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "course_id",
                    Value = course_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_instructor_courses] @id, @course_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_q_stud_answerAsync(int? id, int? Q_id, int? ex_id, string std_answer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Q_id",
                    Value = Q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "std_answer",
                    Size = 40,
                    Value = std_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_q_stud_answer] @id, @Q_id, @ex_id, @std_answer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_question_choicesAsync(int? id, string choices, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "choices",
                    Size = 200,
                    Value = choices ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_question_choices] @id, @choices", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_std_coursesAsync(int? id, int? course_id, int? course_grade, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "course_id",
                    Value = course_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "course_grade",
                    Value = course_grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_std_courses] @id, @course_id, @course_grade", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_studAsync(int? id, string first_name, string last_name, int? dept_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "first_name",
                    Size = 40,
                    Value = first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_name",
                    Size = 40,
                    Value = last_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_stud] @id, @first_name, @last_name, @dept_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
